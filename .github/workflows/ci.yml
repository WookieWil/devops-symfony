name: CI ChallengePipeLine

on:
  pull_request:
    branches: [master, dev]
  push:
    branches: [master, dev]

env:
  PHP_VERSION: '8.2'
  REGISTRY: ghcr.io

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite
          coverage: none

      - name: Validate composer.json
        run: composer validate --strict

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Check security vulnerabilities
        run: composer audit

  docker-build:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write # pushing to GHCR
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # ensure the repository name is lowercase for GHCR
      - name: Prepare Image Tag
        id: prep
        run: |
          REPO_NAME_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          TAG="${{ env.REGISTRY }}/$REPO_NAME_LOWER:${{ github.sha }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.prep.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
